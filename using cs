#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jun  9 11:42:20 2019

@author: renuka
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from math import *
from mpl_toolkits.mplot3d import Axes3D
from ai import cs


def func(f, T, M):
    # f
    t, r, theta, phi, pt, pr, ptheta, pphi = f
    # derivatives
    dpthetadT = (cos(theta)*(ptheta)**2)/((r**2)*sin(phi)**3)
    dprdT = (pphi**2/r**3)-(M/(r-2*M)**2)-((M*pr**2)/r**2)
    dtdT = (1+(2*M/r))*pt
    drdT = (1-(2*M/r)*pr)
    dthetadT = ptheta/(r**2)
    dphidT = pphi/((r**2)*(sin(theta)**2))
    return np.array([dtdT, drdT, dthetadT, dphidT, dptdT, dprdT, dpthetadT, dpphidT])

# initial conditions and constants
pt = -1
dptdT = 0
ptheta = 0
dpphidT = 0
M = 9999
t0 = 0
r0 = 4790
theta = np.radians(pi/2)
phi0 = np.radians(pi/4) # angular momentum p = "amount of rotational motion"
pr0 = 0.5
ptheta0 = 0
pphi0 = 0.7

f0=np.array([t0, r0, theta, phi0, pt, pr0, ptheta0, pphi0]) # initial conditions, necessary to find the constants after the return operation 

T = np.linspace(-1000, 900, 900) # time variation between -1000s and 900s with a total of 900 calculations

xx=odeint(func, f0, T, args=(M,)) # generate the solution, args=() is to add M to the equations

r = xx[:, 1]
theta = xx[:, 2]
phi = xx[:, 3]

# spherical to cartesian
x, y, z = cs.sp2cart(r, theta, phi)

plt.figure()
plt.axes(projection="3d")
plt.plot(T, x, y, z)
plt.show()
