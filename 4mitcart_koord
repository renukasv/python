#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May 17 13:11:22 2019

@author: renuka
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from math import *
from mpl_toolkits.mplot3d import Axes3D
#from vpython import *

#ball=sphere(pos=vector(0,0,0), radius=40)

def func(z, T, M):
    # z
    t, r, theta, phi, pt, pr, ptheta, pphi = f
    # derivatives
    dpthetadT = (cos(theta)*(ptheta)**2)/((r**2)*sin(phi)**3)
    dprdT = (pphi**2/r**3)-(M/(r-2*M)**2)-((M*pr**2)/r**2)
    dtdT = (1+(2*M/r))*pt
    drdT = (1-(2*M/r)*pr)
    dthetadT = ptheta/(r**2)
    dphidT = pphi/((r**2)*(sin(theta)**2))
    # return
    # print(T,z) ¿
    # if r <= 2*6.67408*(10**-11)*(M/300000000**2) :
    #    print black sphere ¿¿¿
    return (dtdT, drdT, dthetadT, dphidT, dptdT, dprdT, dpthetadT, dpphidT)
    


theta = pi/2
phi0 = pi/4
r0 = 4790

f0=[0, cos(phi0)*r0, sin(phi0)*sin(theta)*r0, cos(theta)*r0, -1, 0.5, 0, 0.7]

T = np.linspace(-1000, 900, 900)

pt = -1
dptdT = 0
ptheta = 0
dpphidT = 0
M = 9999
theta = pi/2
phi0 = pi/4
r0 = 4790

xx=odeint(func, f0, T, args=(M,))

# X = xx[:,1], xx[:,2], xx[:,3]

def sph_to_cart(theta, phi, r):
    x, y, z = g
    x = r * cos(phi) * sin(theta)
    y = r * sin(phi) * sin(theta)
    z = r * cos(theta)
    return (x, y, z)

# initial condition
g0=(r0 * np.outer(np.cos(phi0), r0 * np.outer(np.sin(phi0), np.sin(theta)), 
                  r0 * np.outer(np.ones(np.size(phi0)), np.cos(theta)))

# sph=odeint(sph_to_cart, g0, T, args=(M,))

plt.figure(1)
plt.axes(projection="3d")
plt.plot(T, xx[:1], 'b', label='x') #xx[:1] = 1st element of the matrix (array) => r, 'b' = color blue
plt.plot(T, xx[:2], 'r', label='y')
plt.plot(T, xx[:3], 'k', label='z')
plt.legend()
plt.show()

r = 500

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
u = np.linspace(0, 2 * np.pi, 100)
v = np.linspace(0, np.pi, 100)
x = r * np.outer(np.cos(u), np.sin(v))
y = r * np.outer(np.sin(u), np.sin(v))
z = r * np.outer(np.ones(np.size(u)), np.cos(v))
ax.plot_surface(x, y, z,  rstride=4, cstride=4, color='k')
plt.show()


#photon sphere ((3/2)*2*6.67408*(10**-11)*(M/300000000**2))
# Rs=2*6.67408*(10**-11)*(M/300000000**2)
# pr = Krümmung der Flugbahn ¿
# Warum ist ptheta nicht immer = 0?
# x = cos(phi)*sin(theta)*r
# y = sin(phi)*sin(theta)*r
# z = cos(theta)*r
