#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jul  3 17:02:57 2019

@author: renuka
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import math
from math import *
from mpl_toolkits.mplot3d import Axes3D
#import mpl_toolkits.mplot3d.axes3d as p3
#import matplotlib.animation as animation

# initial conditions, constants
ptheta = 0
rs = 2
t0 = 0
theta = np.pi/2
# dptdT = 0

# equations of motion
def func(f, T, rs):
    # f
    t, r, theta, phi, pt, pr, ptheta, pphi = f
    # derivatives
    dtdT = r/(r-rs) #(1 / (-1+(rs / r)))*pt # 1/(1-rs/r) r/(r-rs)
    drdT = (1 - (rs/r))*pr
    dthetadT = 0 #ptheta/(r**2)
    dphidT = pphi/(r**2) #*(sp.sin(theta)**2)
    dptdT = 0
    dprdT = (((pphi**2) / (r**3)) - (rs/(2*((r-rs)**2))) - ((rs*(pr**2)) / (2*(r**2))))
    dpthetadT = 0 #(cos(theta)*(ptheta)**2)/((r**2)*sp.sin(phi)**3)
    dpphidT = 0 #pphi/((r**2)*(sp.sin(theta)**2)) #0
    return(dtdT, drdT, dthetadT, dphidT, dptdT, dprdT, dpthetadT, dpphidT)

# initial coordinates
r0 = 12*rs
r1 = 50*rs
r2 = 34*rs
r3 = 40*rs
phi0 = np.pi
phi1 = np.pi/2
phi2 = np.pi/3
phi3 = np.pi
pr0 = 0 #0.1             
pr1 = 0.03
pr2 = 0.1
pr3 = 0
pphi0 = 5 #4, 5, 6
pphi1 = 4
pphi2 = 2 #(WEIRD), 3
pphi3 = 7 #3

# pt must be calculated since G and c = 1 , otherwise â‰  photon (H=0)
def time_momentum(r, pr, pphi):
    pt = -(sqrt((((1-(rs/r))**2)*(pr**2)) + (pphi**2)*(1-rs/r)/(r**2)))
    return(pt)
    
pt0 = time_momentum(r0, pr0, pphi0)
pt1 = time_momentum(r1, pr1, pphi1)
pt2 = time_momentum(r2, pr2, pphi2)
pt3 = time_momentum(r3, pr3, pphi3)

f0=[t0, r0, theta, phi0, pt0, pr0, ptheta, pphi0] # red
g0=[t0, r1, theta, phi1, pt1, pr1, ptheta, pphi1] # blue
h0=[t0, r2, theta, phi2, pt2, pr2, ptheta, pphi2] # green
i0=[t0, r3, theta, phi3, pt3, pr3, ptheta, pphi3] # yellow
   
T = np.linspace(0, 2250, 9000)

xx=odeint(func, f0, T, args=(rs,)) # generate the solution, args=() is to add rs to the equations
yy=odeint(func, g0, T, args=(rs,))
zz=odeint(func, h0, T, args=(rs,))
ww=odeint(func, i0, T, args=(rs,))

# defining values from odeints
r00 = xx[:, 1]
theta00 = xx[:, 2]
phi00 = xx[:, 3]
pt00 = xx[:, 4]
pr00 = xx[:, 5]
pphi00 = xx[:, 7]

r11 = yy[:, 1]
theta11 = yy[:, 2]
phi11 = yy[:, 3]
pt11 = yy[:, 4]
pr11 = yy[:, 5]
pphi11 = yy[:, 7]

r22 = zz[:, 1]
theta22 = zz[:, 2]
phi22 = zz[:, 3]
pt22 = zz[:, 4]
pr22 = zz[:, 5]
pphi22 = zz[:, 7]

r33 = ww[:, 1]
theta33 = ww[:, 2]
phi33 = ww[:, 3]
pt33 = ww[:, 4]
pr33 = ww[:, 5]
pphi33 = ww[:, 7]


# checking H = 0
print("Hamiltonians")

def Hamiltonian(r, pt, pr, pphi):
    H = (-((1-rs/r)**-1)*(pt**2)/2 + (1-rs/r)*(pr**2)/2 + (pphi**2)/(2*(r**2)))
    return(H)    
    
H0 = Hamiltonian(r00, pt00, pr00, pphi00)
H1 = Hamiltonian(r11, pt11, pr11, pphi11)
H2 = Hamiltonian(r22, pt22, pr22, pphi22)
H3 = Hamiltonian(r33, pt33, pr33, pphi33)

#if np.any(r00) >= rs:
print(H0)

if np.amax(H0) < 6e-12:
    print("Your results are correct")
else:
    print("Your results are wrong")
 
#if np.any(r11) >= rs:
print(H1)
if np.amax(H1) < 6e-12:
    print("Your results are correct")
else:
    print("Your results are wrong")
    
#if np.any(r22) >= rs:
print(H2)
    
if np.amax(H2) < 6e-12:
    print("Your results are correct")
else:
    print("Your results are wrong")

#if np.any(r33) >= rs:
print(H3)
    
if np.amax(H3) < 6e-12:
    print("Your results are correct")
else:
    print("Your results are wrong")

# spherical to cartesian coordinates 
def sph2cart(r, phi, theta):
    X = r * np.cos(phi) * np.sin(theta)
    Y = r * np.sin(phi) * np.sin(theta)
    Z = r * np.cos(theta)
    return(X, Y, Z)

X0, Y0, Z0 = sph2cart(r00, phi00, theta00)
X1, Y1, Z1 = sph2cart(r11, phi11, theta11)
X2, Y2, Z2 = sph2cart(r22, phi22, theta22)
X3, Y3, Z3 = sph2cart(r33, phi33, theta33)

# black sphere (black hole)
fig = plt.figure()
ax = fig.add_subplot(111, projection="3d")
u = np.linspace(0, 2 * np.pi, 100)
v = np.linspace(0, np.pi, 100)


x = rs * np.outer(np.cos(u), np.sin(v))
y = rs * np.outer(np.sin(u), np.sin(v))
z = rs * np.outer(np.ones(np.size(u)), np.cos(v))

# plot black sphere
ax.plot_surface(x, y, z, rstride=4, cstride=4, color='k')

# plot trajectories
plt.plot(X0, Y0, Z0, 'r')
plt.plot(X1, Y1, Z1, 'b')
plt.plot(X2, Y2, Z2, 'g')
plt.plot(X3, Y3, Z3, 'y')



# limits
ax.set_xlim(-45, 45)
ax.set_ylim(-45, 45)
ax.set_zlim(-45, 45)
# labels
ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')

plt.show()
