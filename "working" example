#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun  5 10:48:08 2019

@author: renuka
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from math import *
from mpl_toolkits.mplot3d import Axes3D

def func(f, T, M):
    # f
    t, r, theta, phi, pt, pr, ptheta, pphi = f
    # derivatives
    dpthetadT = (cos(theta)*(ptheta)**2)/((r**2)*sin(phi)**3)
    dprdT = (pphi**2/r**3)-(M/(r-2*M)**2)-((M*pr**2)/r**2)
    dtdT = (1+(2*M/r))*pt
    drdT = (1-(2*M/r)*pr)
    dthetadT = ptheta/(r**2)
    dphidT = pphi/((r**2)*(sin(theta)**2))
    return np.array([dtdT, drdT, dthetadT, dphidT, dptdT, dprdT, dpthetadT, dpphidT])

# initial conditions and constants
G = 6.67428 * 10**-11
c = 299792458
pt = -1
dptdT = 0
ptheta = 0
dpphidT = 0
M = 5000
t0 = 0
r0 = ((2*G*M)/(c**2)) + 2000
theta = np.radians(pi/2)
phi0 = np.radians(pi/4) # angular momentum p = "amount of rotational motion"
pr0 = 0.5 # between 0.5 and 0.6sÂ¿ 0.5 works the best
ptheta0 = 0
pphi0 = 0.7

f0=np.array([t0, r0, theta, phi0, pt, pr0, ptheta0, pphi0]) # initial conditions, necessary to find the constants after the return operation 

T = np.linspace(0, 1360, 900) # time variation between 0s and 1360s with a total of 900 calculations
# with r0 = [...] + 2000 : between 0s and 1350-4000s\[4000]
# with r0 = [...] + 4000 : between 0s and 6900-

xx=odeint(func, f0, T, args=(M,)) # generate the solution, args=() is to add M to the equations

r = xx[:, 1]
theta = xx[:, 2]
phi = xx[:, 3]

# spherical to cartesian coordinates 
X = r * np.cos(phi) * np.sin(theta)
Y = r * np.sin(phi) * np.sin(theta)
Z = r * np.cos(theta)
fig = plt.figure()
ax = fig.add_subplot(1,1,1, projection="3d")
plt.plot(X, Y, Z)
ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')
# ax.set_xlim(-1000, 1000)
# ax.set_ylim(0, 200)
# ax.set_zlim(0, 10)
plt.show()
